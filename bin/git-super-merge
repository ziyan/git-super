#!/bin/bash
set -e

SCRIPT=$(basename $0)
REF=$1
MESSAGE=$2

function usage
{
    echo "Usage: ${SCRIPT} <ref> [message]"
    echo "       Branch and push all submodules in tree, e.g. ${SCRIPT} origin/master \"Merge from master.\""
    echo
    exit 1
}

function root
{
    [ ! -z "${GIT_SUPER_ROOT}" ] || export GIT_SUPER_ROOT=$(git-super-root)
}

function submodules
{
    git-super-foreach pwd
}

function merge
{
    # checkout and update to latest
    git checkout --quiet "${BRANCH}" || ( echo "${SCRIPT}: $(pwd): failed to checkout ${BRANCH}"; exit 1 )
    git pull --quiet origin "${BRANCH}" || ( echo "${SCRIPT}: $(pwd): failed to pull ${BRANCH}"; exit 1 )
    git submodule update --quiet --init || ( echo "${SCRIPT}: $(pwd): failed to update submodules"; exit 1 )

    # recurse
    submodules | for DIR in $(cat -); do
        pushd "${DIR}" > /dev/null 2>&1
        merge
        popd > /dev/null 2>&1
    done

    # try to stage changed submodules
    submodules | for DIR in $(cat -); do
        git add "${DIR}" || ( echo "${SCRIPT}: $(pwd): failed to add ${DIR}"; exit 1 )
    done

    # skip if nothing to commit
    echo "${SCRIPT}: $(pwd)"
    if ! git diff --cached --quiet; then
        if [ -z "${MESSAGE}" ]; then
            git commit --quiet || ( echo "${SCRIPT}: $(pwd): failed to commit"; exit 1 )
        else
            git commit --quiet -m "${MESSAGE}" || ( echo "${SCRIPT}: $(pwd): failed to commit"; exit 1 )
        fi
    fi

    # merge
    if [ -z "${MESSAGE}" ]; then
        git merge --quiet "${REF}" || ( echo "${SCRIPT}: $(pwd): failed to merge"; exit 1 )
    else
        git merge --quiet -m "${MESSAGE}" "${REF}" || ( echo "${SCRIPT}: $(pwd): failed to merge"; exit 1 )
    fi
    git push --quiet origin "${BRANCH}" || ( echo "${SCRIPT}: $(pwd): failed to push"; exit 1 )
}

if [[ $# -lt 1 ]] || [[ $# -gt 2 ]] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    usage
fi

# go to root git repository
root

# figure out what branch to sync to
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "${BRANCH}" == "HEAD" ]; then
    echo "${SCRIPT}: $(pwd): root of repository not on any branch"
    exit 1
fi

# recursively merge
merge

